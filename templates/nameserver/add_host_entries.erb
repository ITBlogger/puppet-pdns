#!/usr/bin/perl
use DBI;
use warnings;
use strict;

my $forward_domain = '<%= scope.lookupvar('pdns::nameserver::config::forward_domain') %>';
my $reverse_domain = '<%= scope.lookupvar('pdns::nameserver::config::reverse') %>';

<% if scope.lookupvar('pdns::nameserver::config::backend') == 'sqlite' -%>
# SQLite
my $dbh = DBI->connect("dbi:SQLite:dbname=/var/pdns/powerdns.sqlite", "", "");
<% elsif scope.lookupvar('pdns::nameserver::config::backend') == 'postgresql' -%>
# Posgresql
my $dbh = DBI->connect("dbi:Pg:dbname=powerdns", "", "", {AutoCommit => 1})
  or die DBI->err;
<% end -%>

my ($forward_domain_id) =
  $dbh->selectrow_array("SELECT id FROM domains WHERE name='$forward_domain'");
my ($reverse_domain_id) =
  $dbh->selectrow_array("SELECT id FROM domains WHERE name='$reverse_domain'");

my $sth_insert_A =
  $dbh->prepare("INSERT INTO records (domain_id, name, type, content, ttl, prio) VALUES($forward_domain_id,?,'A',?,3600,NULL)");
my $sth_insert_PTR =
  $dbh->prepare("INSERT INTO records (domain_id, name, type, content, ttl, prio) VALUES($reverse_domain_id,?,'PTR',?,3600,NULL)");
my $sth_select_A =
  $dbh->prepare("SELECT content from records where domain_id='$forward_domain_id' AND name=?");
my $sth_select_A_IP =
  $dbh->prepare("SELECT name from records where domain_id='$forward_domain_id' AND content=?");
my $sth_select_PTR =
  $dbh->prepare("SELECT content from records where domain_id='$reverse_domain_id' AND name=?");
my $sth_select_PTR_host =
  $dbh->prepare("SELECT name from records where domain_id='$reverse_domain_id' AND content=?");

while(<>) {
  chomp;
  my ($host, $type, $ip) = split(/\s+/, $_, 3);
  my ($current_host, $current_ip);

  unless ($host =~ /^(.*?)\./) {
    $host .= '.' . $forward_domain;
  }

  $sth_select_A->execute($host) or die;
  ($current_ip) = $sth_select_A->fetchrow_array;

  $sth_select_A_IP->execute($ip) or die;
  ($current_host) = $sth_select_A_IP->fetchrow_array;

  print "Adding A record for host $host with IP $ip\n";
  if ($current_ip) {
    if ($current_ip eq $ip) {
      print "already exists\n";
    }
    else {
      print "existing A record for host $host with different IP $current_ip\n";
    }
  }
  elsif ($current_host) {
    print "existing A record for different host $current_host with IP $ip\n";
  }
  else {
    print "ok\n";
    $sth_insert_A->execute($host, $ip) or die;
  }

  $sth_select_PTR->execute($ip) or die;
  ($current_host) = $sth_select_PTR->fetchrow_array;

  $sth_select_PTR_host->execute($host) or die;
  ($current_ip) = $sth_select_PTR_host->fetchrow_array;

  print "Adding PTR record for IP $ip with host $host\n";
  if ($current_host) {
    if ($current_host eq $host) {
      print "already exists\n";
    }
    else {
      print "existing PTR record for IP $ip with different host $current_host\n";
    }
  }
  elsif ($current_ip) {
    print "existing PTR record for different IP $current_ip with host $host\n";
  }
  else {
    print "ok\n";
    my @f = split(/\./, $ip);
    my $reverse_ip = join(".", reverse @f);
    $sth_insert_PTR->execute("${reverse_ip}.in-addr.arpa", $host) or die;
  }
  print "\n";
}
