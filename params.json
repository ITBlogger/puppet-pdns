{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Puppet-pdns","tagline":"PowerDNS Puppet module","body":"# puppet-pdns\r\n\r\nManage PowerDNS configuration using Puppet\r\n\r\nRun either a PowerDNS name server or a PowerDNS resolver\r\n\r\n## pdns::nameserver\r\n\r\nRun a PowerDNS name server to authoritatively answer hostname/IP queries from DNS\r\nresolvers for a specific set of domains managed by the name server.\r\n\r\n### Parameters\r\n\r\n*use_hiera*: look up configuration under 'pdns_nameserver' hash in hiera\r\n\r\n*backend*: database backend to use - one of: _sqlite_ or _postgresql_. Default: _sqlite_.\r\n\r\n*listen_address*: IP to listen on. Default: _$::ipaddress_\r\n\r\n*forward_domain*: Internal domain name (eg. .local). Default: undef\r\n\r\n*reverse_domain*: Reverse .in-addr.arpa domain name for the forward domain (eg.\r\n10.in-addr.arpa).  If forward domain is specified and this is not set then it\r\nis derived from the listen_address.  Default: undef\r\n\r\n#### Hiera configuration\r\n\r\nParameters can be specified in hiera configuration files under the\r\n'pdns_nameserver' hash:\r\n\r\n    pdns_nameserver:\r\n      backend: ...\r\n      listen_address: ...\r\n      forward_domain: ...\r\n      reverse_domain: ...\r\n\r\n### Examples\r\n\r\nAssuming that the primary IP address is a 10.17.0.1:\r\n\r\n1) PowerDNS name server with SQLite backend\r\n\r\n    class { 'pdns::nameserver': }\r\n\r\nor:\r\n\r\n    class { 'pdns::nameserver':\r\n      backend => 'sqlite'\r\n    }\r\n\r\nwhich is the same as:\r\n\r\n    class { 'pdns::nameserver':\r\n      backend        => 'sqlite',\r\n      listen_address => '10.17.0.1',\r\n    }\r\n\r\n2) PowerDNS name server with Postgresql backend:\r\n\r\n    class { 'pdns::nameserver':\r\n      backend => 'postgresql'\r\n    }\r\n\r\nwhich is the same as:\r\n\r\n    class { 'pdns::nameserver':\r\n      backend        => 'postgresql',\r\n      listen_address => '10.17.0.1',\r\n    }\r\n\r\n3) PowerDNS name server configured with an internal .local domain:\r\n\r\n    class { 'pdns::nameserver':\r\n      forward_domain => 'local'\r\n    }\r\n\r\nwhich is the same as:\r\n\r\n    class { 'pdns::nameserver':\r\n      backend        => 'sqlite',\r\n      listen_address => '10.17.0.1',\r\n      forward_domain => 'local',\r\n      reverse_domain => '10.in-addr.arpa',\r\n    }\r\n\r\n### Scripts\r\n\r\nUse the `add_host` script to add an A record for a hostname - for example add\r\nan A record for the _prod1_ host with IP _10.0.0.3_:\r\n\r\n    # /etc/pdns/add_host prod1 10.0.0.3\r\n    Adding A record for host x120.local with IP 10.0.0.3: ok\r\n    Adding PTR record for IP 10.0.0.3 with host prod1.local: ok\r\n    Restarting name server: ok\r\n    $ host prod1\r\n    prod1.local has address 10.0.0.3\r\n\r\nUse the `add_cname` script to add an CNAME record (alias) for a hostname - for\r\nexample to add an alias for the _prod1_ host called _puppet_:\r\n\r\n    # /etc/pdns/add_cname puppet prod1\r\n    Adding CNAME record: alias puppet.local, host prod1.local: ok\r\n    Restarting name server: ok\r\n    $ host puppet\r\n    puppet.local is an alias for prod1.local.\r\n    prod1.local has address 10.0.0.1\r\n\r\nUse the `show` script to see the entries in the database - for example:\r\n\r\n    # /etc/pdns/show \r\n               name            | type  |   content    \r\n    ---------------------------+-------+--------------\r\n     ns1.local                 | A     | 10.47.73.125\r\n     prod2.local               | A     | 10.0.0.4\r\n     alias2.local              | CNAME | prod2.local\r\n     10.in-addr.arpa           | NS    | ns1.local\r\n     local                     | NS    | ns1.local\r\n     125.73.47.10.in-addr.arpa | PTR   | ns1.local\r\n     4.0.0.10.in-addr.arpa     | PTR   | prod2.local\r\n     10.in-addr.arpa           | SOA   | ns1.local\r\n     local                     | SOA   | ns1.local\r\n    (10 rows)\r\n\r\n## pdns::resolver\r\n\r\nRun a PowerDNS resolver that contacts the appropriate DNS name servers on\r\nbehalf of clients to covert a hostname into an IP or an IP into a hostname.\r\n(The IP address of a DNS resolver is what is specified in /etc/resolv.conf on\r\nLinux/Unix hosts.)\r\n\r\n### Parameters\r\n\r\n*use_hiera*: look up configuration under 'pdns_resolver' hash in hiera\r\n\r\n*listen_address*: IP to listen on. Default: _$::ipaddress_\r\n\r\n*dont_query*: IP ranges to exclude from lookups. Default: '127.0.0.0/8, 10.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12, ::1/128'\r\n\r\n*forward_zones*: Array of <domain>=<name server IP> values specifying where to\r\nsend queries for specific domain.  Default: undef\r\n\r\n*forward_domain*: Internal domain name (eg. .local). Default: undef\r\n\r\n*reverse_domain*: Reverse .in-addr.arpa domain name for the forward domain (eg.\r\n10.in-addr.arpa).  If forward domain is specified and this is not set then it\r\nis derived from the listen_address.  Default: undef\r\n\r\n*nameserver*: The IP address of the authoritative nameserver for the internal\r\ndomain name specified in $forward_domain.  Default: $::ipaddress\r\n\r\n#### Hiera configuration\r\n\r\nParameters can be specified in hiera configuration files under the\r\n'pdns_resolver' hash:\r\n\r\n    pdns_resolver:\r\n      listen_address: ...\r\n      dont_query: ...\r\n      forward_zones: ...\r\n      forward_domain: ...\r\n      reverse_domain: ...\r\n      nameserver: ...\r\n\r\n### Examples\r\n\r\nAssuming that the local IP address is 192.168.0.72 and there is a authoritative\r\nname server for an internal .local domain at 192.168.0.2:\r\n\r\n1) Basic PowerDNS resolver:\r\n\r\n    class { 'pdns::resolver': }\r\n\r\nwhich is the same as:\r\n\r\n    class { 'pdns::resolver':\r\n      listen_address => 192.168.0.72\r\n    }\r\n\r\n3) PowerDNS resolver configured to send queries for a .local domain to the\r\nspecified name server:\r\n\r\n    class { 'pdns::resolver':\r\n      forward_domain => 'local',\r\n      nameserver     => '192.168.0.2'\r\n    }\r\n\r\nwhich is the same as:\r\n\r\n    class { 'pdns::resolver':\r\n      listen_address => 192.168.0.72,\r\n      dont_query     => '127.0.0.0/8, 10.0.0.0/8, 172.16.0.0/12, ::1/128',\r\n      forward_domain => 'local',\r\n      reverse_domain => '168.192.in-addr.arpa',\r\n      nameserver     => '192.168.0.2'\r\n    }\r\n\r\nor:\r\n\r\n    class { 'pdns::resolver':\r\n      listen_address => 192.168.0.72,\r\n      dont_query     => '127.0.0.0/8, 10.0.0.0/8, 172.16.0.0/12, ::1/128',\r\n      forward_zones  => [\r\n        'local=192.168.0.2',\r\n        '168.192.in-addr.arpa=192.168.0.2'\r\n      ]\r\n    }\r\n\r\n4) PowerDNS resolver configured to send queries for a .local domain to the\r\nspecified name server and network (192.168.0.0/24) for reverse lookups:\r\n\r\n    class { 'pdns::resolver':\r\n      forward_domain => 'local',\r\n      forward_zones  => [\r\n        'local=192.168.0.2',\r\n        '0.168.192.in-addr.arpa=192.168.0.2'\r\n      ]\r\n    }\r\n\r\nwhich is the same as:\r\n\r\n    class { 'pdns::resolver':\r\n      listen_address => '192.168.0.72',\r\n      dont_query     => '127.0.0.0/8, 10.0.0.0/8, 172.16.0.0/12, ::1/128',\r\n      forward_zones  => [\r\n        'local=192.168.0.2',\r\n        '0.168.192.in-addr.arpa=192.168.0.2'\r\n      ]\r\n    }\r\n\r\nor:\r\n\r\n    class { 'pdns::resolver':\r\n      listen_address => '192.168.0.72',\r\n      dont_query     => '127.0.0.0/8, 10.0.0.0/8, 172.16.0.0/12, ::1/128',\r\n      forward_domain => 'local',\r\n      reverse_domain => '0.168.192.in-addr.arpa',\r\n      nameserver     => '192.168.0.2',\r\n    }\r\n\r\n## Testing\r\n\r\nTests are implemented using RSpec, rspec-puppet and puppetlabs_spec_helper.  To\r\nrun them you will first need to install puppetlabs_spec_helper:\r\n\r\n    # gem install puppetlabs_spec_helper\r\n\r\nThen switch to the module directory and run rake:\r\n\r\n    $ rake\r\n    rake build            # Build puppet module package\r\n    rake clean            # Clean a built module package\r\n    rake coverage         # Generate code coverage information\r\n    rake help             # Display the list of available rake tasks\r\n    rake lint             # Check puppet manifests with puppet-lint\r\n    rake spec             # Run spec tests in a clean fixtures directory\r\n    rake spec_clean       # Clean up the fixtures directory\r\n    rake spec_prep        # Create the fixtures directory\r\n    rake spec_standalone  # Run spec tests on an existing fixtures directory\r\n\r\n    $ rake spec\r\n    /usr/bin/ruby -S rspec spec/classes/pdns__resolver_spec.rb spec/classes/pdns__nameserver_spec.rb spec/classes/pdns__resolver__config_spec.rb spec/classes/pdns__nameserver__config_spec.rb --color\r\n    ...............\r\n    \r\n    Finished in 5.19 seconds\r\n    15 examples, 0 failures\r\n\r\n## Support\r\n\r\nLicense: Apache License, Version 2.0\r\n\r\nGitHub URL: https://github.com/erwbgy/puppet-pdns\r\n","google":""}